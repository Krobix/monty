import ast

__all__ = ("MontyException", "CompilationError", "MissingTypeAnnotation", "BadReturnType", "UnsupportedNode")


class MontyException(Exception):
    """Base exception class.

    Usefull for catching every other exception generated by the library.
    """


class CompilationError(MontyException):
    """A generic compilation error base class."""


class UnsupportedNode(CompilationError):
    """Raised when a node does not have a visitor."""


class MissingTypeAnnotation(CompilationError):
    """An exception that gets raised when a type annotationg was expected but found missing."""

    def __init__(self, *, module: "Module", func: "Function", arg: ast.arg):
        super().__init__()

        self.module = module
        self.func = func
        self.arg = arg


class BadReturnType(CompilationError):
    """Raised when the type of a return value does not match the function return annotation."""

    def __init__(self, *, module: "ir.Module", func: "ir.Function", kind: "ir.RawType"):
        super().__init__()

        self.module = module
        self.func = func
        self.expected = kind
